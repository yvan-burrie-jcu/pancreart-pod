package InsulinPumpSim;/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;
import java.util.*;
//import java.util.Timer;
//import java.util.TimerTask;
//import Contoller;

public class Display extends Frame {
    static java.awt.TextField outputBox = new java.awt.TextField();
    static java.awt.TextField lastDoseBox = new java.awt.TextField();
    static java.awt.TextField timeBox = new java.awt.TextField();
    int dose = 0;
    boolean timerStarted = false;
    Timer timer;
    int mode = 2; //Begin in the Run state
    // Used for addNotify check.
    boolean fComponentsAdjusted = false;
    //{{DECLARE_CONTROLS
    java.awt.FileDialog openFileDialog1 = new java.awt.FileDialog(this);
    java.awt.Label label1 = new java.awt.Label();
    java.awt.Label label2 = new java.awt.Label();
    java.awt.Label label3 = new java.awt.Label();
    java.awt.Label label4 = new java.awt.Label();
    java.awt.TextField modeDisplayBox = new java.awt.TextField();
    java.awt.Panel panel1 = new java.awt.Panel();
    java.awt.Button AdministerInsulinBut = new java.awt.Button();
    java.awt.Button modeBut = new java.awt.Button();
    //{{DECLARE_MENUS
    java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
    java.awt.Menu menu1 = new java.awt.Menu();
    java.awt.MenuItem newMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem openMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem saveMenuItem = new java.awt.MenuItem();
    //}}
    java.awt.MenuItem saveAsMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem separatorMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
    java.awt.Menu menu2 = new java.awt.Menu();
    java.awt.MenuItem cutMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem copyMenuItem = new java.awt.MenuItem();
    java.awt.MenuItem pasteMenuItem = new java.awt.MenuItem();
    java.awt.Menu menu3 = new java.awt.Menu();
    java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();

    public Display() {
        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.

        //{{INIT_CONTROLS
        setLayout(null);
        setBackground(java.awt.Color.yellow);
        setSize(491, 242);
        setVisible(false);
        openFileDialog1.setMode(FileDialog.LOAD);
        openFileDialog1.setTitle("Open");
        //$$ openFileDialog1.move(24,312);
        label1.setText("Output");
        label1.setAlignment(java.awt.Label.CENTER);
        add(label1);
        label1.setBackground(java.awt.Color.white);
        label1.setBounds(36, 12, 101, 25);
        add(outputBox);
        outputBox.setBounds(12, 48, 155, 35);
        add(lastDoseBox);
        lastDoseBox.setBounds(180, 48, 150, 36);
        label2.setText("Last Dose Amount");
        label2.setAlignment(java.awt.Label.CENTER);
        add(label2);
        label2.setBackground(java.awt.Color.white);
        label2.setBounds(192, 12, 130, 29);
        add(timeBox);
        timeBox.setBounds(336, 48, 144, 38);
        label3.setText("Time");
        label3.setAlignment(java.awt.Label.CENTER);
        add(label3);
        label3.setBackground(java.awt.Color.white);
        label3.setBounds(348, 12, 106, 28);
        label4.setText("Operator Mode");
        label4.setAlignment(java.awt.Label.CENTER);
        add(label4);
        label4.setBackground(java.awt.Color.white);
        label4.setBounds(156, 108, 116, 26);
        modeDisplayBox.setText("MANUAL");
        add(modeDisplayBox);
        modeDisplayBox.setBackground(java.awt.Color.white);
        modeDisplayBox.setBounds(276, 108, 60, 24);
        panel1.setLayout(null);
        add(panel1);
        panel1.setBackground(java.awt.Color.red);
        panel1.setBounds(144, 96, 206, 132);
        AdministerInsulinBut.setLabel("Administer 1 unit of Insulin");
        panel1.add(AdministerInsulinBut);
        AdministerInsulinBut.setBackground(java.awt.Color.lightGray);
        AdministerInsulinBut.setBounds(24, 84, 168, 35);
        modeBut.setLabel("Change Operator Mode");
        panel1.add(modeBut);
        modeBut.setBackground(java.awt.Color.lightGray);
        modeBut.setBounds(24, 48, 168, 33);
        setTitle("AWT Application");
        //}}

        //{{INIT_MENUS
        menu1.setLabel("File");
        menu1.add(newMenuItem);
        newMenuItem.setEnabled(false);
        newMenuItem.setLabel("New");
        newMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_N, false));
        menu1.add(openMenuItem);
        openMenuItem.setLabel("Open...");
        openMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O, false));
        menu1.add(saveMenuItem);
        saveMenuItem.setEnabled(false);
        saveMenuItem.setLabel("Save");
        saveMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S, false));
        menu1.add(saveAsMenuItem);
        saveAsMenuItem.setEnabled(false);
        saveAsMenuItem.setLabel("Save As...");
        menu1.add(separatorMenuItem);
        separatorMenuItem.setLabel("-");
        menu1.add(exitMenuItem);
        exitMenuItem.setLabel("Exit");
        mainMenuBar.add(menu1);
        menu2.setLabel("Edit");
        menu2.add(cutMenuItem);
        cutMenuItem.setEnabled(false);
        cutMenuItem.setLabel("Cut");
        cutMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_X, false));
        menu2.add(copyMenuItem);
        copyMenuItem.setEnabled(false);
        copyMenuItem.setLabel("Copy");
        copyMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_C, false));
        menu2.add(pasteMenuItem);
        pasteMenuItem.setEnabled(false);
        pasteMenuItem.setLabel("Paste");
        pasteMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_V, false));
        mainMenuBar.add(menu2);
        menu3.setLabel("Help");
        menu3.add(aboutMenuItem);
        aboutMenuItem.setLabel("About...");
        mainMenuBar.add(menu3);
        //$$ mainMenuBar.move(0,312);
        setMenuBar(mainMenuBar);
        //}}

        //{{REGISTER_LISTENERS
        SymWindow aSymWindow = new SymWindow();
        this.addWindowListener(aSymWindow);
        SymAction lSymAction = new SymAction();
        openMenuItem.addActionListener(lSymAction);
        exitMenuItem.addActionListener(lSymAction);
        aboutMenuItem.addActionListener(lSymAction);
        AdministerInsulinBut.addActionListener(lSymAction);
        modeBut.addActionListener(lSymAction);
        //}}

        modeDisplayBox.setText("RUN");
        //Controller.run();
    }

    public Display(String title) {
        this();
        setTitle(title);
    }

    static public void main(String args[]) throws Exception {
        if (args[0].equals("simulator") || args[0].equals("SIMULATOR")) {
            Simulator simulator;

            simulator = new Simulator();
            simulator.start();
        } else {
            Controller.startClock();
        }

        try {
            //Create a new instance of our application's frame, and make it visible.
            (new Display()).setVisible(true);
        } catch (Throwable t) {
            System.err.println(t);
            t.printStackTrace();
            //Ensure the application exits with an error condition.
            System.exit(1);
        }
    }

    public static void displayOutput(String output) {
        // to do: code goes here.
        outputBox.setText(output);
    }

    public static void displayDose(String output) {
        // to do: code goes here.
        lastDoseBox.setText(output);
    }
    //}}

    public static void updateClock(String timer) {
        timeBox.setText(timer);
    }

    /**
     * Shows or hides the component depending on the boolean flag b.
     *
     * @param b if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b) {
        if (b) {
            setLocation(50, 50);
        }
        super.setVisible(b);
    }

    public void addNotify() {
        // Record the size of the window prior to calling parents addNotify.
        Dimension d = getSize();

        super.addNotify();

        if (fComponentsAdjusted)
            return;

        // Adjust components according to the insets
        setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
        Component components[] = getComponents();
        for (int i = 0; i < components.length; i++) {
            Point p = components[i].getLocation();
            p.translate(getInsets().left, getInsets().top);
            components[i].setLocation(p);
        }
        fComponentsAdjusted = true;
    }

    void Display_WindowClosing(java.awt.event.WindowEvent event) {
        // to do: code goes here.

        Display_WindowClosing_Interaction1(event);
    }

    void Display_WindowClosing_Interaction1(java.awt.event.WindowEvent event) {
        try {
            // QuitDialog Create and show as modal
            (new QuitDialog(this, true)).setVisible(true);
        } catch (Exception e) {
        }
    }

    void openMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
        // to do: code goes here.

        openMenuItem_ActionPerformed_Interaction1(event);
    }

    void openMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
        try {
            // OpenFileDialog Create and show as modal
            int defMode = openFileDialog1.getMode();
            String defTitle = openFileDialog1.getTitle();
            String defDirectory = openFileDialog1.getDirectory();
            String defFile = openFileDialog1.getFile();

            openFileDialog1 = new java.awt.FileDialog(this, defTitle, defMode);
            openFileDialog1.setDirectory(defDirectory);
            openFileDialog1.setFile(defFile);
            openFileDialog1.setVisible(true);
        } catch (Exception e) {
        }
    }

    void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
        // to do: code goes here.

        aboutMenuItem_ActionPerformed_Interaction1(event);
    }

    void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
        try {
            // AboutDialog Create and show as modal
            (new AboutDialog(this, true)).setVisible(true);
        } catch (Exception e) {
        }
    }

    void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
        // to do: code goes here.

        exitMenuItem_ActionPerformed_Interaction1(event);
    }

    void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
        try {
            // QuitDialog Create and show as modal
            (new QuitDialog(this, true)).setVisible(true);
        } catch (Exception e) {
        }
    }

    void AdministerInsulinBut_ActionPerformed(java.awt.event.ActionEvent event) {
        // to do: code goes here.

        /**
         * Use java.util.Timer to schedule the calculation of how
         * many times button was pressed once 5 seconds have passed.
         */
        if (mode == 3) //Only allow insulin to be administered when in MANUAL mode
        {
            if (timerStarted == false) {
                timerStarted = true;
                timer = new Timer();
                timer.schedule(new timerFinished(), 5 * 1000);
            }

            AdministerInsulinBut_ActionPerformed_Interaction1(event);
        }
    }

    void AdministerInsulinBut_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
        try {
            dose = dose + 1;
        } catch (java.lang.Exception e) {
        }
    }

    void modeBut_ActionPerformed(java.awt.event.ActionEvent event) {
        // to do: code goes here.

        modeBut_ActionPerformed_Interaction1(event);
    }

    void modeBut_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
        try {
            if (mode == 1) {
                mode = 2;
                Controller.changeState(1); //Run the startup code
                modeDisplayBox.setText("RUN");
            } else if (mode == 2) {
                mode = 3;
                modeDisplayBox.setText("MANUAL");
                Display.displayOutput("Manual Overide");
                Controller.manualButtonPressed(true);
            } else if (mode == 3) {
                mode = 1;
                modeDisplayBox.setText("OFF");
                Controller.manualButtonPressed(false);
            }
        } catch (java.lang.Exception e) {
        }
    }

    class SymWindow extends java.awt.event.WindowAdapter {
        public void windowClosing(java.awt.event.WindowEvent event) {
            Object object = event.getSource();
            if (object == Display.this)
                Display_WindowClosing(event);
        }
    }

    class SymAction implements java.awt.event.ActionListener {
        public void actionPerformed(java.awt.event.ActionEvent event) {
            Object object = event.getSource();
            if (object == openMenuItem)
                openMenuItem_ActionPerformed(event);
            else if (object == aboutMenuItem)
                aboutMenuItem_ActionPerformed(event);
            else if (object == exitMenuItem)
                exitMenuItem_ActionPerformed(event);
            else if (object == AdministerInsulinBut)
                AdministerInsulinBut_ActionPerformed(event);
            else if (object == modeBut)
                modeBut_ActionPerformed(event);
        }
    }

    class timerFinished extends TimerTask {
        public void run() {
            //Terminate the timer thread
            timer.cancel();
            //Set the final dose amount selected
            Controller.SetDose(dose);
            //Reset dose value
            dose = 0;
            //Timer isn't running anymore
            timerStarted = false;
        }
    }
}

